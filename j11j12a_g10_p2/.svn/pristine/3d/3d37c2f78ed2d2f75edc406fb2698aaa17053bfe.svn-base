/*Reventador.c
Entrada: 5 arg
            - Nombre de fichero que contiene diccionario
            - Fila desde la que empezar a leer el fichero. (Octeto, segun la practica)
            - Fila en la que se tiene que detener el reventador
            - la clave cifrada
            - Nombre de fichero donde debe introducir el resultado con la clave.

Have fun!
*/

#include <stdio.h>
#include <stdlib.h>
//#include "probar-claves.c"
struct Config{
  char f_claves[256];  //Contains the dictionary file
  int ini_dict;   //
  int fin_dict;
  char MD5key[256];
  char exit_file[256];
};
int LoadConfig(int argc, char *argv[], struct Config *config);
int main(int argc, char *argv[]){
  struct Config config;
  FILE Diccionario;
  LoadConfig(argc, &argv[0], &config);
  /*if(Diccionario=fopen(config.f_claves, "r")==NULL){
    perror("[main] Couldn't open key dictionary");
    return -1;
  }*/
  for(int i=config.ini_dict; i<config.fin_dict; i++){
    printf("%d\n", i);
  }
  /*FILE *f_claves;
  int ini_dict=0;
  int fin_dict=0;
  char MD5key[196];
  const char exit_file;*/
  /*if(argc!=6){
    perror("Error! Numero de argumentos esperados, es 5");
    return -1;
  }
  if((f_claves=fopen(argv[1], "r"))==NULL){
    perror("Error! Diccionario no encontrado!");
    return -1;
  }; //Introducimos fichero a leer
  sscanf(argv[5], "%s", &exit_file);
  //exit_file=argv[5];
  ini_dict=int(argv[2]);
  fin_dict=int(argv[3]);
  MD5key=argv[4];
  for(int i=ini_dict; i<fin_dict; i++){
    printf("Hola");
    /*if(probar_1palabra(pos_clave, MD5key)){
      FILE *decipher_file=fopen(exit_file, "wf");

    }
  }
  for (int i = 0; i < argc; i++)
      printf("argv[%d] = %s\n", i, argv[i]);*/
  return 0;
}
int LoadConfig(int argc, char *argv[], struct Config *config){
  /*Esta funcion comprueba que todos los datos sean metidos
  , y los guarda en config
  */
  if(argc!=6){
    perror("[LoadConfig], Numero de argumentos esperados es 5!");
    return -1;
  }
  if(!sscanf(argv[1], "%s", (config->f_claves))){
    perror("[LoadConfig], f_claves is not correctly set up");
    return -1;
  }
  if(!sscanf(argv[2], "%d", &(config->ini_dict))){
    perror("[LoadConfig], int ini_dict is not correctlyset up");
    return -1;
  }
  if(!sscanf(argv[3], "%d", &(config->fin_dict))){
    perror("[LoadConfig], int fin_dict is not correctlyset up");
    return -1;
  }
  if(!sscanf(argv[4], "%s", (config->MD5key))){
    perror("[LoadConfig], MD5key is not correctly set up");
    return -1;
  }
  if(!sscanf(argv[5], "%s", (config->exit_file))){
    perror("[LoadConfig], exit_file is not correctly set up");
    return -1;
  }
  return 0;

}
